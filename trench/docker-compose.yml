services:
  authentik-postgresql:
    image: docker.io/library/postgres:alpine
    environment:
      POSTGRES_DB: authentik
      POSTGRES_PASSWORD: 285dc0db1cd7d075a33036ca758f59342e44aed8fdbe72b2ac50f4b8153e0c5d
      POSTGRES_USER: authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ~/.authentik/postgres/:/var/lib/postgresql/data/:rw

  authentik-redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ~/.authentik/redis/:/data/:rw

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    command: server
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: 285dc0db1cd7d075a33036ca758f59342e44aed8fdbe72b2ac50f4b8153e0c5d
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_SECRET_KEY: 21f8164db40f7759e2ff9818979df24939b5090f5cfedeee9040863d0b37a3b1
    labels:
      traefik.http.routers.authentik-router.entrypoints: websecure
      traefik.http.routers.authentik-router.rule: Host(`authentik.bob.house`)
      traefik.http.routers.authentik-router.tls: "true"
      traefik.http.services.authentik-service.loadbalancer.server.port: "9000"
    volumes:
      - ~/.authentik/media/:/media/:rw
      - ~/.authentik/custom-templates/:/templates/:rw

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    command: worker
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: 285dc0db1cd7d075a33036ca758f59342e44aed8fdbe72b2ac50f4b8153e0c5d
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_SECRET_KEY: 21f8164db40f7759e2ff9818979df24939b5090f5cfedeee9040863d0b37a3b1
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ~/.authentik/media/:/media/:rw
      - ~/.authentik/certs/:/certs/:rw
      - ~/.authentik/custom-templates/:/templates/:rw

  dozzle:
    image: amir20/dozzle:latest
    environment:
      DOZZLE_REMOTE_AGENT: ahti:7007,marshall:7007,pope:7007
    labels:
      traefik.http.routers.dozzle-router.entrypoints: websecure
      traefik.http.routers.dozzle-router.rule: Host(`dozzle.bob.house`)
      traefik.http.routers.dozzle-router.tls: "true"
      traefik.http.services.dozzle-service.loadbalancer.server.port: "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  glances:
    image: nicolargo/glances:latest
    environment:
      GLANCES_OPT: -w
    labels:
      traefik.http.routers.glances-router.entrypoints: websecure
      traefik.http.routers.glances-router.rule: Host(`glances-trench.bob.house`)
      traefik.http.routers.glances-router.tls: "true"
      traefik.http.services.glances-service.loadbalancer.server.port: "61208"
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    labels:
      traefik.http.routers.homeassistant-router.entrypoints: websecure
      traefik.http.routers.homeassistant-router.rule: Host(`homeassistant.bob.house`)
      traefik.http.routers.homeassistant-router.tls: "true"
      traefik.http.services.homeassistant-service.loadbalancer.server.port: "8123"
    volumes:
      - ~/.homeassistant/:/config/:rw

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    labels:
      traefik.http.routers.homepage-router.entrypoints: websecure
      traefik.http.routers.homepage-router.rule: Host(`homepage.bob.house`)
      traefik.http.routers.homepage-router.tls: "true"
      traefik.http.services.homepage-service.loadbalancer.server.port: "3000"
    volumes:
      - .\homepage\:/app/config/:rw
      - .\homepage\icons\:/app/public/icons/:ro
      - .\homepage\images\:/app/public/images/:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  portainer:
    image: portainer/portainer-ce:latest
    labels:
      traefik.http.routers.portainer-router.entrypoints: websecure
      traefik.http.routers.portainer-router.rule: Host(`portainer.bob.house`)
      traefik.http.routers.portainer-router.tls: "true"
      traefik.http.services.portainer-service.loadbalancer.server.port: "9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ~/.portainer/:/data/:rw

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    labels:
      traefik.http.routers.prometheus-router.entrypoints: websecure
      traefik.http.routers.prometheus-router.rule: Host(`prometheus.bob.house`)
      traefik.http.routers.prometheus-router.tls: "true"
      traefik.http.services.prometheus-service.loadbalancer.server.port: "9090"
    ports:
      - 9090:9090/tcp
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ~/prometheus-data/:/prometheus/:rw

  traefik:
    image: traefik:latest
    command:
      # - --accesslog=true
      - --api.insecure=true
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.cloudflare.acme.email=mail@bob.codes
      - --certificatesresolvers.cloudflare.acme.storage=/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # TRACE  DEBUG  INFO  WARN  ERROR  FATAL  PANIC
      - --log.level=INFO
      - --metrics.prometheus=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addrouterslabels=true
      - --metrics.prometheus.addserviceslabels=true
      - --providers.docker
      - --providers.file.directory=/etc/traefik/dynamic_conf/
    environment:
      CF_API_EMAIL: mail@bob.codes
      CF_DNS_API_TOKEN_FILE: /CF_DNS_API_TOKEN
    labels:
      traefik.http.routers.traefik-router.entrypoints: websecure
      traefik.http.routers.traefik-router.rule: Host(`traefik.bob.house`)
      traefik.http.routers.traefik-router.tls: "true"
      traefik.http.routers.traefik-router.tls.certresolver: cloudflare
      traefik.http.routers.traefik-router.tls.domains[0].main: bob.house
      traefik.http.routers.traefik-router.tls.domains[0].sans: '*.bob.house'
      traefik.http.services.traefik-service.loadbalancer.server.port: "8080"
    ports:
      - 443:443/tcp
    volumes:
      - ~/.certs/acme.json:/acme.json:rw
      - ~/.certs/CF_DNS_API_TOKEN:/CF_DNS_API_TOKEN:ro
      - ./traefik.yml:/etc/traefik/dynamic_conf/conf.yml:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  uptimekuma:
    image: louislam/uptime-kuma:latest
    labels:
      traefik.http.routers.uptimekuma-router.entrypoints: websecure
      traefik.http.routers.uptimekuma-router.rule: Host(`uptimekuma.bob.house`)
      traefik.http.routers.uptimekuma-router.tls: "true"
      traefik.http.services.uptimekuma-service.loadbalancer.server.port: "3001"
    volumes:
      - ~/.uptimekuma/:/app/data/:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
